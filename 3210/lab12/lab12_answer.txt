

-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt1.s

8460305 425853745 -1632957401 -1119662001 1278171679 323480923 2055634737 -1721698081 727100638 1556761703 1289541263 1824612306 1576493133 1763521117 1842370025 -258161710 -472381579 1697044523 1471348523 1926062181 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
Questions:
1. 
Yes, the code can work with shifts of 2, 7, and 9. You would simply replace the shift amounts in the slli and srli instructions with the new values.
2. 
Yes, the code can work with shifts of 1, 1, and 1. You would replace the shift amounts in the slli and srli instructions with 1.
3. 
Low entropy: Using small shifts like 1 repeatedly does not sufficiently mix the bits of the LFSR state. This results in patterns that are more predictable and less random.
Shorter period: The period of the pseudo-random sequence generated by the LFSR depends on the feedback function and the shifts. Small shifts like 1 are less likely to produce a maximal-length sequence, leading to a shorter period and more repetition in the output.
Marsaglia's research: The triplet (2, 7, 9) was specifically chosen based on empirical testing to produce high-quality random numbers with good statistical properties. (1, 1, 1) does not meet these criteria.

-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt2 copy.s

25372723 732300627 -1543695255 -976883503 -1804206560 76429276 -558004621 -2100301233 -1884126885 -384714263 282586122 601879410 323464116 1304170403 96621964 434018791 1424081572 1257708385 2004630343 595550017 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt2 copy.s

25372723 732300627 -1543695255 -976883503 -1804206560 76429276 -558004621 -2100301233 -1884126885 -384714263 282586122 601879410 323464116 1304170403 96621964 434018791 1424081572 1257708385 2004630343 595550017 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt2 copy.s

25372723 732300627 -1543695255 -976883503 -1804206560 76429276 -558004621 -2100301233 -1884126885 -384714263 282586122 601879410 323464116 1304170403 96621964 434018791 1424081572 1257708385 2004630343 595550017 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt2 copy.s

33841220 1703414980 2058100893 -502310644 -226404482 1424609840 -798629228 76460049 -1280691103 825015833 144350965 -2095289192 -446411327 -2087653046 760353800 662941856 296660417 -163478390 -362598621 852022093 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt2 copy.s

33841220 1703414980 2058100893 -502310644 -226404482 1424609840 -798629228 76460049 -1280691103 825015833 144350965 -2095289192 -446411327 -2087653046 760353800 662941856 296660417 -163478390 -362598621 852022093 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt2 copy.s

33841220 1703414980 2058100893 -502310644 -226404482 1424609840 -798629228 76460049 -1280691103 825015833 144350965 -2095289192 -446411327 -2087653046 760353800 662941856 296660417 -163478390 -362598621 852022093 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
Questions:
If you set the seed to 4 using set_seed, the sequence of random numbers will differ from part 1 because the initial state of the LFSR (lfsr) is now explicitly set to 4 instead of 1. The LFSR's output depends entirely on its initial state, so changing the seed changes the sequence of generated values.

-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt3.s

19 19 9 17 0 28 19 15 27 9 10 18 20 3 12 7 4 1 7 1 
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
Questions:
1.
No, the program does not generate any negative values now. This is because the andi instruction performs a bitwise AND operation, which clears all bits outside the mask (0x1f in this case). The result is always a non-negative value within the range [0, 31].
2.
No, this is not a truly random sequence. By ANDing with 0x03, the random values are restricted to the range [0, 3] (only the last two bits are preserved). Since the LFSR generates values with a much larger range, reducing it to only 4 possible outcomes causes significant repetition, reducing the randomness and entropy of the sequence.
3.
Limiting to a power of 2 (e.g., 2^n) is computationally efficient because it can be achieved using a simple bitwise AND operation. This operation is fast and ensures uniform distribution within the range [0, 2^n - 1].
To limit the values to the range [0, 99], you would need to use a modulo operation (% 100).

-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab12/lab12_pt1 copy.s

AAGOOKAONGOBMMIBEKKEELABHLHOGGLGAHCCOANFDNLCEMKEBEOIFGDK@ANDICODGAOD@JEHNHOFNNGFGHADFLEJLFNALOMGHDOO
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
Questions:
1.
The code would always produce the same sequence of random numbers because the seed determines the initial state of the LFSR. Resetting the seed to 3 before every call ensures the same sequence is generated repeatedly.
2.
Limiting to 16 characters simplifies the mapping process, as it can be achieved with a single AND operation (e.g., andi t2, a0, 0xF). This reduces complexity and ensures uniform distribution within the range.
3.
Including the at-sign (@, ASCII 64) simplifies the mapping process because it aligns with the ASCII range starting at 64. This avoids additional adjustments to the random values and keeps the code concise.
4.
To use lower-case letters (a to p, ASCII 97â€“112), change the ori instruction to add 97 instead of 64: ori t2, t2, 0x61  # Map to ASCII range 97-112
5.
Shift operations: Use srl or sll to shift bits and reduce the range.
Advantage: Simple and fast.
Disadvantage: May not produce uniform distribution.
Modulo operation: Use % to limit the range.
Advantage: Provides precise control over the range.
Disadvantage: Computationally more expensive than bitwise operations.
6.
The low part of the time value changes more frequently (e.g., milliseconds or seconds), providing better variability for the seed. The high part (e.g., hours or days) changes less often, leading to less apparent randomness.