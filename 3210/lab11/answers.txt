-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab11/string_copy.S

82 73 83 67 45 86 32 65 115 115 101 109 98 108 121 32 80 114 111 103 114 97 109 109 105 110 103 0 RISC-V Assembly Programming
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
Questions for Part 1
1. 
Remove the code that prints each character and the space:
mv     a1, s0
li     a0, 1
ecall

li    a0, 11
li    a1, 32
ecall
Keep the final print of the copied string:
li    a0, 4
la    a1, copy
ecall
2. 
bne s2, s4, loop compares the addresses in s2 and s4. If they are not equal, it jumps back to the loop label to continue copying.
3. 
If the buffer is too small, the program will overwrite memory beyond the allocated space, leading to undefined behavior or a segmentation fault.
4. 
The loop copies each byte, including the null terminator (\0) at the end of the string. The loop ends when s2 reaches mystring_end, ensuring the null terminator is copied.
5. 
To prove it copies the string, modify the original string (mystring) after copying and print both mystring and copy. If the copy remains unchanged, it confirms the string was copied.
6. 
copy: .word 0 initializes a single word to store the address of the allocated memory. The actual 100 bytes are allocated dynamically using sbrk. Using .word 100 would incorrectly allocate 4 bytes initialized to 100.

Starting program /Users/ran/cs/github/DSA/3210/lab11/string_copy copy 2.S


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab11/string_copy copy 2.S

"RISC-V Assembly Programming" 28
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------

Questions for Part 2
1.
lb loads a single byte (8 bits), which is the size of a character in ASCII. lw loads a word (32 bits), which would include extra bytes and not correctly handle single characters.
2.
The length would be incorrect because find_len counts bytes, not characters. Multi-byte characters (e.g., UTF-8) occupy more than one byte, so the reported length would be larger than the actual number of characters.
3.
Update the subroutine to use the new registers
mv    t1, x0          # Use t1 instead of a1 for count
lb    t2, 0(a0)       # Use t2 instead of t0 for the byte
addi  t1, t1, 1       # Increment t1
Update the caller to pass and retrieve values using the new registers:
la    t0, mystring    # Use t0 instead of a0
call  find_len
mv    a1, t1          # Move result from t1 to a1
4.
No, it might not be obvious. A trailing space is visually indistinguishable from padding or formatting issues. To clarify, explicitly print the string enclosed in quotes (e.g., "string ").


-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab11/string_copy copy 3.S

2
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
Questions for Part 3
1.
No, blt (branch if less than) compares two registers and branches if the first is less than the second. In this case, we are comparing equality (bne or beq) to check if the character is a space. Using blt would not work because it does not check for equality.
2.
beq rs1, rs2, label: Branches to label if the values in rs1 and rs2 are equal.
bne rs1, rs2, label: Branches to label if the values in rs1 and rs2 are not equal.
3.
Yes, the code still works. Each space is processed individually, and the count is incremented for every space, even if they are consecutive.
4.
Yes, the code still works. The first character is checked, and if it is a space, the count is incremented correctly.

-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab11/string_copy copy 4.S

RISC-v Assembly Programming
RISC-V Assembly Programming
not equal
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
Starting program /Users/ran/cs/github/DSA/3210/lab11/string_copy copy 4.S

RISC-V Assembly Programming
RISC-V Assembly Programming
not equal
Exited with error code 0
Stop program execution!
-------------------------------------------------------------------------------------------

Questions for Part 4
No, the original two strings are not the same. 
Since string comparison in this program is case-sensitive, the lowercase 'v' and uppercase 'V' are treated as different characters, resulting in the strings being identified as "not equal."